from tqdm import tqdm
import requests
from sqlalchemy import Table, Column, MetaData, String, Numeric, JSON, DateTime, Integer, Boolean
from sqlalchemy.dialects.postgresql import JSONB
from datetime import datetime, timedelta
import json

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ API ===
def get_all_pages(url, headers, method='GET', body=None):
    page = 1
    all_data = []

    with tqdm(desc=f"–ó–∞–≥—Ä—É–∑–∫–∞ {url.split('/')[-1]}") as pbar:
        while True:
            params_or_json = {"page": page, "page_size": 100}
            if method == 'GET':
                response = requests.get(url, headers=headers, params=params_or_json)
            else:
                if body:
                    body.update(params_or_json)
                response = requests.post(url, headers=headers, json=body)

            if response.status_code != 200:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code} {response.text}")
                break

            data = response.json().get('data', [])
            if not data:
                break

            all_data.extend(data)
            page += 1
            pbar.update(len(data))

    return all_data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º
def transform_staff(dict_list):
    result = [
        {
            'id': item['id'],
            'seance_length': item['seance_length'],
            'price': item['price']['max'] if isinstance(item.get('price'), dict) else None
        }
        for item in dict_list
    ]
    return result

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Å–ø–∏—Å–∫–∏ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä–∏, –≤ —Å—Ç—Ä–æ–∫–∏ JSON.
def normalize_json_columns(df):
    for col in df.columns:
        if df[col].apply(lambda x: isinstance(x, (dict, list))).any():
            df[col] = df[col].apply(
                lambda x: json.dumps(x, ensure_ascii=False) if isinstance(x, (dict, list)) else x
                )
    return df

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î ===

def create_table_with_types(df, table_name, engine):
    metadata = MetaData()
    columns = []

    for col in df.columns:
        sample_value = df[col].dropna().iloc[0] if not df[col].dropna().empty else None

        if isinstance(sample_value, dict) or isinstance(sample_value, list):
            col_type = JSONB
        elif isinstance(sample_value, bool):
            col_type = Boolean
        elif isinstance(sample_value, int):
            col_type = Integer
        elif isinstance(sample_value, float):
            col_type = Numeric
        elif isinstance(sample_value, datetime.datetime):
            col_type = DateTime
        else:
            col_type = String

        columns.append(Column(col, col_type))

    table = Table(table_name, metadata, *columns)
    metadata.drop_all(engine, [table], checkfirst=True)  # –£–¥–∞–ª–∏—Ç—å –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å (–∑–∞–º–µ–Ω–∏—Ç—å)
    metadata.create_all(engine)  # –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å –Ω—É–∂–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
    print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name} —Å–æ–∑–¥–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫.")

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ª–∏–≤–∫–∏ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ –≤ –ë–î ===
def upload_to_postgres(df, table_name, engine):
    if not df.empty:
        create_table_with_types(df, table_name, engine)
        df.to_sql(table_name, engine, if_exists='append', index=False)
        print(f"üì• –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É {table_name} ({len(df)} —Å—Ç—Ä–æ–∫).")
    else:
        print(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {table_name} –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—â–µ–Ω–∞.")